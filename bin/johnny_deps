#!/usr/bin/env bash

set -eu

## The Godeps file is expected to have lines like so:
#
# github.com/nu7hatch/gotrail v2.6
#
## where the first element is the import path and the second is a tag
## or commit SHA in the project.

## Functions

# Iterates over Godep file dependencies and sets
# the specified version on each of them.
set_dependencies() {
  while read package version; do
    echo ">> Getting package "$package""
    go get -u -d "$package"
    echo ">> Setting $package to version $version"
    cd "${GOPATH%%:*}/src/${package%%/...}"
    git checkout -q "$version"
  done < <(echo "$deps")
}

# Gets latest release or HEAD for a project and adds it to Godeps.
add_package_to_godeps() {
  if [[ $INSTALL_HEAD == false ]]
  then
    echo ">> Determining last release for "$ADD_PACKAGE""
    last_git_tag=`get_last_git_tag_for "$ADD_PACKAGE"`

    if [[ "$last_git_tag" == "" ]]
    then
      echo ">> Unable to determine last release, do so manually or call with -H to add HEAD to Godeps"
      exit 1
    fi

    echo ">> Last release for "$ADD_PACKAGE" is "$last_git_tag""
    echo ""$ADD_PACKAGE" "$last_git_tag"" >> "$godeps"
    echo ">> Added to Godeps"
  else
    echo "Adding HEAD to Godeps"
  fi
}

# Stores latest release for $ADD_PACKAGE in $last_git_tag.
get_last_git_tag_for() {
  owner=`echo "$1" | cut -d '/' -f 2`
  repo=`echo "$1" | cut -d '/' -f 3`

  github_response=`curl -f --silent "https://api.github.com/repos/"$owner"/"$repo"/git/refs/tags"` || echo ''

  # Yay for JSON parsing.
  regexp='"ref":.*refs\/tags'
  last_git_tag=`echo "$github_response" | grep "$regexp" | tail -1 | cut -d'/' -f 3 | cut -d'"' -f 1`
  echo "$last_git_tag"
}

## /functions


## Main execution

# Parse command line arguemnts

# Calls add_package_to_godeps action and stores which package to add.
ADD_PACKAGE=false
# Adds latest commit to Godeps file instead of latest release
INSTALL_HEAD=false
# Godeps default file is './Godeps' (can be overriden by -f)
godeps="Godeps"

while getopts “ha:Hf:” OPTION
do
  case $OPTION in
    h)
      usage
      exit 1
      ;;
    a)
      ADD_PACKAGE=$OPTARG
      ;;
    H)
      INSTALL_HEAD=true
      ;;
    f)
      godeps=$OPTARG
      ;;
    ?)
      usage
      exit 1
      ;;
  esac
done

# Get dependencies from Godeps file excluding comments
deps=$(sed 's/#.*//;/^\s*$/d' < "$godeps") || echo ""

if [[ $ADD_PACKAGE != false ]]
then
  add_package_to_godeps
else
  set_dependencies
fi
