#!/usr/bin/env bash

set -eu

## The Godeps file is expected to have lines like so:
#
# github.com/nu7hatch/gotrail v2.6
#
## where the first element is the import path and the second is a tag
## or commit SHA in the project.

## Functions

# Iterates over Godep file dependencies and sets
# the specified version on each of them.
set_dependencies() {
  while read package version; do
    (
      install_path="${GOPATH%%:*}/src/${package%%/...}"
      [[ -e "$install_path/.git/index.lock" ]] && wait
      echo ">> Getting package "$package""
      go get -u -d "$package"
      echo ">> Setting $package to version $version"
      cd $install_path
      [ -d .hg ] && hg update -q "$version"
      [ -d .git ] && git checkout -q "$version"
      [ -d .bzr ] && bzr revert -q -r "$version"
    ) &
  done < <(echo "$deps")
  wait
  echo ">> All Done"
}

# Gets latest release or HEAD for a project and adds it to Godeps unless it's already there.
add_package_to_godeps() {
  if [[ `echo "$deps"` =~ $ADD_PACKAGE ]]
  then
    echo ">> Package "$ADD_PACKAGE" is already in "$godeps"."
    exit 1
  fi

  if [[ $INSTALL_HEAD == false ]]
  then
    add_last_git_tag_to_godeps
  else
    add_HEAD_to_godeps
  fi

  echo ""$ADD_PACKAGE" "$ADD_PACKAGE_VERSION"" >> "$godeps"
  echo ">> Added to Godeps"
}

add_last_git_tag_to_godeps() {
  owner=`echo "$ADD_PACKAGE" | cut -d '/' -f 2`
  repo=`echo "$ADD_PACKAGE" | cut -d '/' -f 3`

  echo ">> Determining last release for "$ADD_PACKAGE""
  github_response=`curl -f --silent "https://api.github.com/repos/"$owner"/"$repo"/git/refs/tags"` || echo ''

  # Yay for JSON parsing.
  regexp='"ref":.*refs\/tags'
  ADD_PACKAGE_VERSION=`echo "$github_response" | grep "$regexp" | tail -1 | cut -d'/' -f 3 | cut -d'"' -f 1`

  if [[ "$ADD_PACKAGE_VERSION" == "" ]]
  then
    echo ">> Unable to determine last release, do so manually or call with -H to add HEAD to "$godeps"."
    exit 1
  fi

  echo ">> Last release for "$ADD_PACKAGE" is "$ADD_PACKAGE_VERSION""
}

add_HEAD_to_godeps() {
  owner=`echo "$ADD_PACKAGE" | cut -d '/' -f 2`
  repo=`echo "$ADD_PACKAGE" | cut -d '/' -f 3`

  echo ">> Determining HEAD for "$ADD_PACKAGE""
  ADD_PACKAGE_VERSION=`curl -f --silent "https://api.github.com/repos/"$owner"/"$repo"/git/refs/heads/master" | grep sha | tr ' ' '\n' | tail -1 | tr ',' ' ' | tr '"' ' '` || echo ''

  if [[ "$ADD_PACKAGE_VERSION" == "" ]]
  then
    echo ">> Unable to determine HEAD. Check manually and add to "$godeps"."
    exit 1
  fi

  echo ">> HEAD for "$ADD_PACKAGE" is "$ADD_PACKAGE_VERSION""
}

## /functions


## Main execution

# Parse command line arguemnts

# Calls add_package_to_godeps action and stores which package to add.
ADD_PACKAGE=false
# Adds latest commit to Godeps file instead of latest release
INSTALL_HEAD=false
# Godeps default file is './Godeps' (can be overriden by -f)
godeps="Godeps"

while getopts “ha:Hf:” OPTION
do
  case $OPTION in
    h)
      usage
      exit 1
      ;;
    a)
      ADD_PACKAGE=$OPTARG
      ;;
    H)
      INSTALL_HEAD=true
      ;;
    f)
      godeps=$OPTARG
      ;;
    ?)
      usage
      exit 1
      ;;
  esac
done

# Check if Godeps file exists
if [[ ! -f "$godeps" ]]
then
  echo ">> $godeps file does not exist."
  exit 1
fi

# Get dependencies from Godeps file excluding comments
deps=$(sed 's/#.*//;/^\s*$/d' < "$godeps") || echo ""

if [[ $ADD_PACKAGE != false ]]
then
  add_package_to_godeps
else
  set_dependencies
fi
